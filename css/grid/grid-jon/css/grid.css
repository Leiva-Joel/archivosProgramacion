html {
  box-sizing: border-box;
  font-size: 16px;
  font-family: sans-serif;
  scroll-behavior: smooth;
}

*,
*::after,
*::before {
  box-sizing: inherit;
}

a[href="#top"] {
  margin: 1rem;
  display: block;
  font-size: 2rem;
  text-align: center;
  text-decoration: none;
}

p {
  margin: 0;
}

h2 {
  margin-top: 50vh;
  text-align: center;
}

img {
  margin: auto;
  display: block;
  max-width: 100%;
  height: auto;
}

.menu {
  margin-bottom: 100vh;
  font-size: 125%;
}

.menu li {
  margin-bottom: 1rem;
}

.container {
  margin: 0 auto;
  width: 80%;
  height: 80vh;
  background-color: #222;
  border: medium solid #000;
}

.item {
  padding: 1rem;
  font-size: 1.25rem;
  background-color: #666;
  border: medium solid #999;
}

.sub-item{
  padding: 1rem;
  border: medium solid #ccc;
  background-color: #ddd;
}

.grid-explicit {
  display: grid;
  /* Grid de 3c x 3r */
  grid-template-rows: 2rem 20vh 30%;
  grid-template-columns: 50% 100px 1fr;
  /* Grid de 5c x 4r */
  grid-template-columns: repeat(5, 20%);
  grid-template-rows: repeat(4, 25%);
  grid-template-rows: repeat(4, 1fr);
  grid-template-columns: repeat(5, 1fr);
  /* Grid de 4c x 5r */
  grid-template-columns: 20% repeat(2, 30%) 20%;
  grid-template-rows: repeat(5, auto);
  grid-row-gap: 1rem;
  /* Obsoleto */
  grid-column-gap: 2rem;
  /* Obsoleto */
  /*gap: row column */
  /*gap: sirve para definir la separacion entre cada columna y/o fila */
  grid-gap: 100px 0px;
  gap: 1vh 1vw;
  gap: 0;
}


.grid-explicit .item:nth-child(10) {
  /*grid-row: define el espacio que va a ocupar cada elemento y en donde empieza y termina */
  grid-row-start: 2;
  grid-row-end: 3;
  grid-column-start: 2;
  grid-column-end: 3;
  grid-row: 2 / 3;
  grid-column: 3 / 4;
  color: cyan;
  grid-row: 2 / 3;
  grid-column: 3 / 5;
  /*grid-area: es el shortcut de grid-row y grid-column es decir podemos definir donde empieza y termina cada linea ya sea de columna y fila*/
  grid-area: 2 / 3 / 3 / 5;
}

.grid-explicit .item:nth-child(12) {
  color: cyan;
  grid-row: span 2;
  grid-column: span 3;
}

.grid-explicit .item:nth-child(15) {
  color: cyan;
  grid-row: 1 / span 2;
  grid-column: 1 / span 2;
}

.grid-line-names {
  display: grid;
  /* Grid de 3c x 3r */
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(3, 1fr);
  grid-template-columns: [linea-c1]1fr [linea-c2]1fr [linea-c3]1fr [linea-c4];
  grid-template-rows: [linea-r1]1fr [linea-r2]1fr [linea-r3]1fr [linea-r4];
  grid-template-rows: [linea-r1]auto [linea-r2]auto [linea-r3]auto [linea-r4];
}

.grid-line-names .item:nth-child(3) {
  color: cyan;
  grid-row: linea-r3 / linea-r4;
  grid-column: linea-c1 / linea-c4;
  grid-area: linea-r3 / linea-c1 / linea-r4 / linea-c4;
}

.grid-areas {
  display: grid;
  /* 3r x 2c */
  grid-template-columns: 1fr 200px;
  grid-template-rows: 100px repeat(2, 1fr) 60px;
  grid-template-areas:
    "header header"
    "content sidebar"
    "content ."
    "footer footer";
}

.header {
  grid-area: header;
}

.content {
  grid-area: content;
  background-color: #46d146;
}

.aside {
  grid-area: sidebar;
  background-color: #ffff00;
}

.footer {
  grid-area: footer;
  background-color: crimson;
}

.grid-implicit {
  /*3r x 4c */
  display: grid;
  display: inline-grid;
  width: 40%;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(3, 200px);
}

.grid-flow {
  /*4r x 5c */
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: repeat(3, 150px);
  /* Es como el flex-direction */
  grid-auto-flow: column;
  /* Podes decidir que hacer con las filas o las columnas que no hayas definido su anchura o altura */
  grid-auto-rows: auto;
  grid-auto-rows: 100px;
  grid-auto-columns: 50px;
}

.grid-flow-dense {
  /*4r x 5c */
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: repeat(4, 200px);
  grid-auto-flow: row dense;
  grid-auto-flow: column dense;
}

/* .grid-flow-dense .item:nth-child(9){
  color: cyan;
  grid-row: span 3;
  grid-column: span 3;
} */

.grid-flow-dense .item:nth-child(11) {
  color: cyan;
  grid-row: span 3;
  grid-column: span 3;
}

.grid-layers {
  /*4r x 4c */
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(4, 1fr);
}

.grid-layers .item:nth-child(1) {
  background-color: #dbea33;
  grid-column: 1 / 3;
  grid-row: 1 / 3;
}

.grid-layers .item:nth-child(2) {
  background-color: #497af8;
  grid-column: 3 / 5;
  grid-row: 1 / 3;
}

.grid-layers .item:nth-child(3) {
  background-color: #90e791;
  grid-column: 1 / 3;
  grid-row: 3 / 5;
}

.grid-layers .item:nth-child(4) {
  background-color: #fa8a2a;
  grid-column: 3 / 5;
  grid-row: 3 / 5;
}

.grid-layers .item:nth-child(5) {
  background-color: #c92af0;
  opacity: .75;
  grid-column: 2 / 4;
  grid-row: 2 / 4;
}

.grid-order {
  /* 2r x 3c */
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(2, 1fr);
}

.grid-order .item:nth-child(1) {
  /* Acepta valores positivos y negativos */
  order: 0;
  /* Default */
  order: 1;
}

.grid-order .item:nth-child(2) {
  order: 2;
}

.grid-order .item:nth-child(5) {
  order: -1;
}

.grid-align {
  /* 2r x 3c */
  display: grid;
  grid-template-columns: repeat(3, 200px);
  grid-template-rows: repeat(2, 200px);
  /*justify-items: permite alinear mis elementos grid en el eje x
  
  align-items: permite alinear mis elementos grid en el eje y
  
  stretch es el valor default y dice que tienen que ocupar todo el espacio de su celda
  
  stari: los alinea al principio de su cuadro;
  
  end: los alinea al final de su cuadro
  
  center: los alinea al centro de su celda
  */
  justify-items: stretch;
  justify-items: start;
  justify-items: end;
  justify-items: center;
  align-items: stretch;
  align-items: start;
  align-items: end;
  align-items: center;
}

.grid-align .item:nth-child(4) {
  /* Con align-self y jusify-self podemos alinear a un elemento en especifico respecto de su celda */
  align-self: start;
  justify-self: start;
}

.grid-align-tracks {
  /* 2r x 3c */
  display: grid;
  grid-template-columns: repeat(3, 200px);
  grid-template-rows: repeat(2, 200px);
  /*justify-content alinea los tracks en el eje horizontal(X)*/
  justify-content: end;
  justify-content: center;
  justify-content: space-between;
  justify-content: space-around;
  justify-content: space-evenly;
  /*justify-content alinea los tracks en el eje vertical(Y)*/
  align-content: start;
  align-content: end;
  align-content: center;
  align-content: space-between;
  align-content: space-between;
  align-content: space-evenly;
}

.grid-min-max {
  /* ?r x 4c */
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-columns: repeat(4, minmax(100px, 200px));
  grid-template-columns: repeat(4, minmax(min-content, 200px));
  grid-template-columns: repeat(4, minmax(100px, min-content));
  grid-template-columns: repeat(4, minmax(100px, max-content));
  grid-template-columns: repeat(4, minmax(min-content, max-content));
}

.grid-repeat {
  /* 4r x 4c */
  display: grid;
  grid-template-columns: repeat(4, 10% 20% 30% 40%);
  grid-template-columns: repeat(1, 10% 20% 30% 40%);
  grid-template-rows: repeat(2, 70px 150px);
  grid-auto-rows: 150px;
}

.grid-dynamics {
  /* ?r x 4c */
  display: grid;
  grid-template-columns: repeat(4, 100px);
  /* auto-fill Rellena la grid con tracks generados dinamicamente */
  grid-template-columns: repeat(auto-fill, 100px);
  /* auto:fit Ajusta la grid con tracks existentes */
  grid-template-columns: repeat(auto-fit, 100px);
  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
}

.grid-responsive{
  /* ?r x 4c */
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1vw;
  gap: 0;
}

.grid-nested{
  /* ?r x 3c */
  display: grid;
  grid-template-columns: repeat(3,1fr);
}